:mod:`matrxs.actions.object_actions`
====================================

.. py:module:: matrxs.actions.object_actions


Module Contents
---------------

.. py:class:: RemoveObject(duration_in_ticks=1)

   Bases: :class:`matrxs.actions.action.Action`

   An action that allows agent to remove EnvObjects (basically ALL objects except YOURSELF) from the GridWorld
   permanently. This includes other AgentAvatars.
















   ..
       !! processed by numpydoc !!

   .. method:: mutate(self, grid_world, agent_id, **kwargs)


      Removes the object specified in kwargs['object_id'] permanently from the grid world if within range of
      kwargs['remove_range'] (if key exists, otherwise default range is 1).

      It does not allow you to remove itself!

      :param grid_world: The current GridWorld
      :param agent_id: The agent that performs the action.
      :param kwargs: Requires an 'object_id' that exists in the GridWorld and the optional 'remove_range' to specify
      the range in which the object can be removed. If a range is not given, defaults to 1.
      :return: An ObjectActionResult.















      ..
          !! processed by numpydoc !!


   .. method:: is_possible(self, grid_world, agent_id, **kwargs)




.. py:class:: RemoveObjectResult(result, succeeded)

   Bases: :class:`matrxs.actions.action.ActionResult`

   .. attribute:: NO_OBJECTS_IN_RANGE
      :annotation: = No objects were in `REMOVE_RANGE`.

      

   .. attribute:: OBJECT_ID_NOT_WITHIN_RANGE
      :annotation: = The object with id `OBJECT_ID` is not within the range of `REMOVE_RANGE`.

      

   .. attribute:: OBJECT_REMOVED
      :annotation: = The object with id `OBJECT_ID` is removed.

      

   .. attribute:: REMOVAL_FAILED
      :annotation: = The object with id `OBJECT_ID` failed to be removed by the environment for some reason.

      


.. py:class:: GrabObject(duration_in_ticks=1)

   Bases: :class:`matrxs.actions.action.Action`

   An action that allows agent to grab EnvObjects (only objects) from the GridWorld. This
   excludes other AgentAvatars. Grabbing automatically is followed by carrying of the object.
   Carrying is implemented in movement actions.
















   ..
       !! processed by numpydoc !!

   .. method:: is_possible(self, grid_world, agent_id, **kwargs)


      This function checks if grabbing an object is possible.
      For this it assumes a infinite grab range and a random object in that range
      The check if an object is within range is done within 'mutate'
      :param grid_world: The current GridWorld
      :param agent_id: The agent that performes the action
      :return:
















      ..
          !! processed by numpydoc !!


   .. method:: mutate(self, grid_world, agent_id, **kwargs)


      Picks up the object specified in kwargs['object_id']  if within range of
      kwargs['grab_range'] (if key exists, otherwise default range is 0).

      It does not allow you to grab yourself/other agents

      :param grid_world: The current GridWorld
      :param agent_id: The agent that performs the action.
      :param kwargs: An optional 'object_id' that exists in the GridWorld (if none is specified
      a random object within range is chosen).

      Optional 'grab_range' to specify the range in which the object can be removed.
      If a range is not given, defaults to 0. 

      Optional 'max_objects' for the amount of objects the agent can carry.
      If no 'max_objects' is set, default is set to 1.
      :return: An ObjectActionResult.















      ..
          !! processed by numpydoc !!


   .. method:: is_possible_grab(self, grid_world, agent_id, object_id, grab_range, max_objects)




.. py:class:: GrabObjectResult(result, succeeded)

   Bases: :class:`matrxs.actions.action.ActionResult`

   .. attribute:: FAILED_TO_REMOVE_OBJECT_FROM_WORLD
      :annotation: = Grab action failed; could not remove object with id {OBJECT_ID} from grid.

      

   .. attribute:: RESULT_SUCCESS
      :annotation: = Grab action success

      

   .. attribute:: NOT_IN_RANGE
      :annotation: = Object not in range

      

   .. attribute:: RESULT_AGENT
      :annotation: = This is an agent, cannot be picked up

      

   .. attribute:: RESULT_NO_OBJECT
      :annotation: = No Object specified

      

   .. attribute:: RESULT_CARRIES_OBJECT
      :annotation: = Agent already carries the maximum amount of objects

      

   .. attribute:: RESULT_OBJECT_CARRIED
      :annotation: = Object is already carried by {AGENT_ID}

      

   .. attribute:: RESULT_UNKNOWN_OBJECT_TYPE
      :annotation: = obj_id is no Agent and no Object, unknown what to do

      

   .. attribute:: RESULT_OBJECT_UNMOVABLE
      :annotation: = Object is not movable

      


.. py:class:: DropObject(duration_in_ticks=1)

   Bases: :class:`matrxs.actions.action.Action`

   .. method:: is_possible(self, grid_world, agent_id, **kwargs)



   .. method:: mutate(self, grid_world, agent_id, **kwargs)


      This function drops one of the items carried by the agent.
      It tries to drop the object within the specified drop_range around the agent,
      trying to drop it as close to the agent as possible

      :param grid_world: pointer to current GridWorld
      :param agent_id: agent that acts
      :param kwargs: Optional an "object_id" can be given. If an agent is carrying
      two or more items, this specifies which item should be dropped.
      :return: Always True















      ..
          !! processed by numpydoc !!


   .. method:: act_drop(self, grid_world, agent, env_obj, drop_loc)


      Drop the object 
















      ..
          !! processed by numpydoc !!


   .. method:: find_drop_loc(self, grid_world, agent, env_obj, drop_range, start_loc)


      Do a breadth first search starting from the agent's location to find
      the closest valid drop location.

      :param grid_world: The grid_world object
      :param reg_ag: the agent object of the agent who wants to drop the object
      :param env_obj: the object to be dropped
      :param drop_range: the range from our current location for which we can drop
      the object
      :return: False if no valid drop location can be found, otherwise the [x,y]
      coords of the closest drop location















      ..
          !! processed by numpydoc !!


   .. method:: is_drop_poss(self, grid_world, env_obj, dropLocation)


      Check if the object can be dropped at a specific location by checking if
      there are any intraversable objects at that location, and if the object to
      be dropped is intraversable
      :param grid_world: The grid_world object
      :param env_obj: the object to be dropped
      :param dropLocation: location to check if it is possible to drop the env_obj there
















      ..
          !! processed by numpydoc !!


   .. method:: possible_drop(self, grid_world, agent_id, obj_id, drop_range)




.. py:class:: DropObjectResult(result, succeeded, obj_id=None)

   Bases: :class:`matrxs.actions.action.ActionResult`

   .. attribute:: RESULT_SUCCESS
      :annotation: = Drop action success

      

   .. attribute:: RESULT_NO_OBJECT
      :annotation: = The item is not carried

      

   .. attribute:: RESULT_NONE_GIVEN
      :annotation: = 'None' used as input id

      

   .. attribute:: RESULT_AGENT
      :annotation: = Cannot drop item on an agent

      

   .. attribute:: RESULT_OBJECT
      :annotation: = Cannot drop item on another intraversable object

      

   .. attribute:: RESULT_UNKNOWN_OBJECT_TYPE
      :annotation: = Cannot drop item on an unknown object

      

   .. attribute:: RESULT_NO_OBJECT_CARRIED
      :annotation: = Cannot drop object when none carried

      


