:mod:`matrxs.actions.door_actions`
==================================

.. py:module:: matrxs.actions.door_actions


Module Contents
---------------

.. py:class:: OpenDoorAction(duration_in_ticks=1)

   Bases: :class:`matrxs.actions.action.Action`

   Action to open a Door
















   ..
       !! processed by numpydoc !!

   .. method:: mutate(self, grid_world, agent_id, **kwargs)


      Performs the actual action in the world.
      Opens the door, by changing the colour and setting the open_door property

      :param grid_world: A pointer to the actual world object.
      :param agent_id: The id known in the grid world as an agent that peforms this action.
      :param kwargs: Requires the door_range (int indicating cells range) and object_id arguments.
      :return: An action result depicting the action's success or failure and reason/description of that result.















      ..
          !! processed by numpydoc !!


   .. method:: is_possible(self, grid_world, agent_id, **kwargs)


      Checks whether the action is possible in the world when performed by the given agent.

      :param grid_world: A pointer to the actual world object.
      :param agent_id: The id known in the grid world as an agent that peforms this action.
      :return: Returns two things; a boolean signalling whether the action is possible or not, and a string telling
      you why the action was not possible.















      ..
          !! processed by numpydoc !!



.. py:class:: CloseDoorAction(duration_in_ticks=1)

   Bases: :class:`matrxs.actions.action.Action`

   Action to open a Door
















   ..
       !! processed by numpydoc !!

   .. method:: mutate(self, grid_world, agent_id, **kwargs)


      Performs the actual action in the world.
      Opens the door, by changing the colour and setting the open_door property

      :param grid_world: A pointer to the actual world object.
      :param agent_id: The id known in the grid world as an agent that peforms this action.
      :param kwargs: Requires the door_range (int indicating cells range) and object_id arguments.
      :return: An action result depicting the action's success or failure and reason/description of that result.















      ..
          !! processed by numpydoc !!


   .. method:: is_possible(self, grid_world, agent_id, **kwargs)


      Checks whether the action is possible in the world when performed by the given agent.

      :param grid_world: A pointer to the actual world object.
      :param agent_id: The id known in the grid world as an agent that peforms this action.
      :return: Returns two things; a boolean signalling whether the action is possible or not, and a string telling
      you why the action was not possible.















      ..
          !! processed by numpydoc !!



.. py:class:: CloseDoorActionResult(result, succeeded)

   Bases: :class:`matrxs.actions.action.ActionResult`

   .. attribute:: RESULT_SUCCESS
      :annotation: = Door was succesfully closed.

      

   .. attribute:: NO_DOORS_IN_RANGE
      :annotation: = No door found in range

      

   .. attribute:: NOT_IN_RANGE
      :annotation: = Specified door is not within range.

      

   .. attribute:: NOT_A_DOOR
      :annotation: = CloseDoor action could not be performed, as object isn't a door

      

   .. attribute:: RESULT_UNKNOWN_OBJECT_TYPE
      :annotation: = obj_id is no Agent and no Object, unknown what to do

      

   .. attribute:: DOOR_ALREADY_CLOSED
      :annotation: = Can't close door, door is already closed.

      

   .. attribute:: DOOR_BLOCKED
      :annotation: = Can't close door, object or agent is blocking the door opening.

      

   .. attribute:: NO_OBJECT_SPECIFIED
      :annotation: = No object_id of a door specified to close.

      


.. py:class:: OpenDoorActionResult(result, succeeded)

   Bases: :class:`matrxs.actions.action.ActionResult`

   .. attribute:: RESULT_SUCCESS
      :annotation: = Door was successfully opened.

      

   .. attribute:: NO_DOORS_IN_RANGE
      :annotation: = No door found in range

      

   .. attribute:: NOT_IN_RANGE
      :annotation: = Specified door is not within range.

      

   .. attribute:: NOT_A_DOOR
      :annotation: = OpenDoor action could not be performed, as object isn't a door

      

   .. attribute:: RESULT_UNKNOWN_OBJECT_TYPE
      :annotation: = obj_id is no Agent and no Object, unknown what to do

      

   .. attribute:: DOOR_ALREADY_OPEN
      :annotation: = Can't open door, door is already open

      

   .. attribute:: DOOR_BLOCKED
      :annotation: = Can't close door, object or agent is blocking the door opening.

      

   .. attribute:: NO_OBJECT_SPECIFIED
      :annotation: = No object_id of a door specified to open.

      


.. function:: is_possible_door_open_close(grid_world, agent_id, action_result, object_id=None, door_range=np.inf)

   Same as is_possible, but this function uses the action_kwargs to get a more accurate prediction.
   Can be used both for checking if the door is already open or closed
















   ..
       !! processed by numpydoc !!


