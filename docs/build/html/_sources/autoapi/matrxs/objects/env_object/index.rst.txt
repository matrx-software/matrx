:mod:`matrxs.objects.env_object`
================================

.. py:module:: matrxs.objects.env_object


Module Contents
---------------

.. py:class:: EnvObject(location, name, class_callable, customizable_properties=None, is_traversable=None, is_movable=None, visualize_size=None, visualize_shape=None, visualize_colour=None, visualize_depth=None, visualize_opacity=None, **custom_properties)

   .. method:: update(self, grid_world)


      Used to update some properties of this object if needed. For example a 'status' property that changes over time.
      It can also be used to update something in the GridWorld. For example a Fire object that damages other objects
      in its location.

      If you want this functionality, you should create a new object that inherits from this class EnvObject.

      This method is called automatically in the game-loop inside a running GridWorld instance.

      :Parameters:

          **grid_world**
              The GridWorld instance representing the entire grid world. Can be used to alter itself or others in the
              world in some way.














      ..
          !! processed by numpydoc !!


   .. method:: change_property(self, property_name, property_value)


      Changes the value of an existing (!) property.
      :param property_name: The name of the property.
      :param property_value:  The value of the property.
      :return: The new properties.
















      ..
          !! processed by numpydoc !!


   .. method:: add_property(self, property_name, property_value)


      Adds a new(!) property with its value to the object.
















      ..
          !! processed by numpydoc !!


   .. method:: location(self)
      :property:


      The location of any object is a pythonic property, this allows us to do various checks on it. One of them is the
      setter that is overridden in AgentAvatar to also transfer all carried objects with it.
      :return: The current location as a tuple; (x, y)
















      ..
          !! processed by numpydoc !!


   .. method:: properties(self)
      :property:


      Returns the custom properties of this object, but also any mandatory properties such as location, name,
      is_traversable and all visualization properties (those are in their own dictionary under 'visualization').

      In the case we return the properties of a class that inherits from EnvObject, we check if that class has

      :return: All mandatory and custom properties in a dictionary.















      ..
          !! processed by numpydoc !!



