:mod:`matrxs.world_builder`
===========================

.. py:module:: matrxs.world_builder


Module Contents
---------------

.. py:class:: WorldBuilder(shape, tick_duration=0.5, random_seed=1, simulation_goal=1000, run_matrxs_api=True, run_matrxs_visualizer=False, visualization_bg_clr='#C2C2C2', visualization_bg_img=None, verbose=False)

   .. method:: worlds(self, nr_of_worlds: int = 100)


      Returns a Generator of GridWorld instance for the specified number of worlds.


      :Parameters:

          **nr_of_worlds**
              The number of worlds the Generator contains. Defaults to 10.


      :Yields:

          GridWorld
              A GridWorld, where all random properties and prospects are sampled using the given master seed.



      :Raises:

          ValueError
              The nr_of_worlds should be a postive non-zero integer.









      ..
          !! processed by numpydoc !!


   .. method:: get_world(self)


      Creates a single GridWorld instance based on the current state of this WorldFactor instance.

      The returned GridWorld can be started with world.run().


      :Returns:

          world: GridWorld
              A GridWorld instance.













      ..
          !! processed by numpydoc !!


   .. method:: __set_world_settings(self, shape, tick_duration, simulation_goal, rnd_seed, visualization_bg_clr, visualization_bg_img, verbose)



   .. method:: add_logger(self, logger_class, log_strategy=None, save_path=None, file_name=None, file_extension=None, delimiter=None, **kwargs)



   .. method:: add_agent(self, location: Union[tuple, list], agent_brain: AgentBrain, name, customizable_properties: Union[tuple, list] = None, sense_capability: SenseCapability = None, is_traversable: bool = True, team: str = None, possible_actions: list = None, is_movable: bool = None, visualize_size: float = None, visualize_shape: Union[float, str] = None, visualize_colour: str = None, visualize_depth: int = None, visualize_opacity: float = None, **custom_properties)


      The helper method within a WorldFactory instance to add a single agent.

      This method makes sure that when this
      factory generates a GridWorld instance, it contains an AgentBody connected to the given AgentBrain.

      All keyword parameters default to None. Which means that their values are obtained from the
      "scenarios/defaults.json" file under the segment AgentBody.

      :Parameters:

          **location**
              The location (x,y) of the to be added agent.

          **agent_brain**
              The AgentBrain instance that will control the agent.

          **name**
              The name of the agent, should be unique to allow the visualisation to have a single web page per agent. If
              the name is already used, an exception is thrown.

          **customizable_properties: optional**
              A list or tuple of names of properties for this agent that can be altered or customized. Either by the agent
              itself or by other agents or objects. If a property value gets changed that is not in this list than an
              exception is thrown.

          **sense_capability: optional**
              The SenseCapability object belonging this this agent's AgentBody. Used by the GridWorld to pre-filter
              objects and agents from this agent's states when querying for actions. Defaults to a SenseCapability that
              sees all object types within the entire world.

          **is_traversable: optional**
              Denotes whether other agents and object can move over this agent. It also throws an exception when this is
              set to False and another object/agent with this set to False is added to the same location.

          **team: optional**
              The team name. Used to group agents together. Defaults to this agent's name to signify it forms its own
              team.

          **possible_actions: optional**
              A list or tuple of the names of the Action classes this agent can perform. With this you can limit the
              actions this agent can perform.

          **is_movable: optional**
              Whether this agent can be moved by other agents (currently this only happens with the DropObjectAction and
              PickUpAction).

          **visualize_size: optional**
              The size of this agent in its visualisation. A value of 1.0 denotes the full grid location square, whereas
              a value of 0.5 denotes half, and 0.0 an infinitesimal small size.

          **visualize_shape: optional**
              The shape of this agent in its visualisation. Depending on the value it obtains this shape: 0 = a square,
              1 = a triangle, 2 = a circle or when "img" the image from `image_filename` is used.

          **visualize_colour: optional**
              The colour of this agent in its visualisation. Should be a string hexadecimal colour value.

          **visualize_depth: optional**
              The visualisation depth of this agent in its visualisation. It denotes the 'layer' on which it is
              visualized. A larger value is more on 'top'.

          **visualize_opacity: optional**
              The opacity of this agent in its visualization. A value of 1.0 means full opacity and 0.0 no opacity.

          **custom_properties: optional**
              Any additional given keyword arguments will be encapsulated in this dictionary. These will be added to the
              AgentBody as custom_properties which can be perceived by other agents and objects or which can be used or
              altered (if allowed to by the customizable_properties list) by the AgentBrain or others.

      :Returns:

          None
              ...




      :Raises:

          AttributeError
              When the given agent name is already added to this WorldFactory instance.









      ..
          !! processed by numpydoc !!


   .. method:: add_team(self, agent_brains: Union[list, tuple], locations: Union[list, tuple], team_name, custom_properties=None, sense_capability=None, customizable_properties=None, is_traversable=None, visualize_size=None, visualize_shape=None, visualize_colour=None, visualize_opacity=None)


      Adds a group of agents as a single team (meaning that their 'team' property all have the given team name).

      All parameters except for the `locations` and `agent_brain` defaults to `None`. Which means that their values
      are obtained from the "scenarios/defaults.json" file under the segment AgentBody.

      :Parameters:

          **agent_brains**
              The list or tuple of AgentBrain that will control each agent in the team. Should be of the same size as
              `locations`.

          **locations**
              The list or tuple of locations in the form of [x, y] at which coordinates each agent starts in the team.
              Should be of the same size as `locations`.

          **team_name**
              The

          **custom_properties**
              ..

          **sense_capability**
              ..

          **customizable_properties**
              ..

          **is_traversable**
              ..

          **visualize_size**
              ..

          **visualize_shape**
              ..

          **visualize_colour**
              ..

          **visualize_opacity**
              ..

      :Returns:

          None
              ..













      ..
          !! processed by numpydoc !!


   .. method:: add_multiple_agents(self, agents, locations, custom_properties=None, sense_capabilities=None, customizable_properties=None, is_traversable=None, teams=None, visualize_sizes=None, visualize_shapes=None, visualize_colours=None, visualize_opacities=None, visualize_depths=None)


      :Parameters:

          **agents**
              ..

          **locations**
              ..

          **custom_properties**
              ..

          **sense_capabilities**
              ..

          **customizable_properties**
              ..

          **is_traversable**
              ..

          **teams**
              ..

          **visualize_sizes**
              ..

          **visualize_shapes**
              ..

          **visualize_colours**
              ..

          **visualize_opacities**
              ..

          **visualize_depths**
              ..














      ..
          !! processed by numpydoc !!


   .. method:: add_agent_prospect(self, location, agent, probability, name='Agent', customizable_properties=None, sense_capability=None, is_traversable=None, team=None, possible_actions=None, is_movable=None, visualize_size=None, visualize_shape=None, visualize_colour=None, visualize_opacity=None, visualize_depth=None, **custom_properties)



   .. method:: add_object(self, location, name, callable_class=None, customizable_properties=None, is_traversable=None, is_movable=None, visualize_size=None, visualize_shape=None, visualize_colour=None, visualize_depth=None, visualize_opacity=None, **custom_properties)



   .. method:: add_object_prospect(self, location, name, probability, callable_class=None, customizable_properties=None, is_traversable=None, visualize_size=None, visualize_shape=None, visualize_colour=None, visualize_depth=None, visualize_opacity=None, **custom_properties)



   .. method:: add_multiple_objects(self, locations, names=None, callable_classes=None, custom_properties=None, customizable_properties=None, is_traversable=None, visualize_sizes=None, visualize_shapes=None, visualize_colours=None, visualize_depths=None, visualize_opacities=None, is_movable=None)



   .. method:: add_human_agent(self, location, agent, name='HumanAgent', customizable_properties=None, sense_capability=None, is_traversable=None, team=None, possible_actions=None, is_movable=None, visualize_size=None, visualize_shape=None, visualize_colour=None, visualize_depth=None, visualize_opacity=None, key_action_map=None, **custom_properties)



   .. method:: add_area(self, top_left_location, width, height, name, customizable_properties=None, visualize_colour=None, visualize_opacity=None, **custom_properties)



   .. method:: add_smoke_area(self, top_left_location, width, height, name, visualize_colour=None, smoke_thickness_multiplier=1.0, visualize_depth=None, **custom_properties)



   .. method:: __list_area_locs(self, top_left_location, width, height)


      Provided an area with the top_left_location, width and height,
      generate a list containing all coordinates in that area
















      ..
          !! processed by numpydoc !!


   .. method:: add_line(self, start, end, name, callable_class=None, customizable_properties=None, is_traversable=None, is_movable=None, visualize_size=None, visualize_shape=None, visualize_colour=None, visualize_depth=None, visualize_opacity=None, **custom_properties)



   .. method:: add_room(self, top_left_location, width, height, name, door_locations=None, with_area_tiles=False, doors_open=False, wall_custom_properties=None, wall_customizable_properties=None, area_custom_properties=None, area_customizable_properties=None, area_visualize_colour=None, area_visualize_opacity=None)



   .. method:: __create_world(self)



   .. method:: __create_grid_world(self)



   .. method:: __create_env_object(self, settings)



   .. method:: __create_agent_avatar(self, settings)



   .. method:: __instantiate_random_properties(self, args)



   .. method:: __reset_random(self)



   .. method:: startup(self)


      Start any world-overarching MATRXS scripts, such as, if requested, the API or MATRXS visualization.
      Returns
      -------
















      ..
          !! processed by numpydoc !!


   .. method:: stop(self)


      Stop any world-overarching MATRXS scripts, such as, if started, the API or MATRXS visualization.
      Returns
      -------
















      ..
          !! processed by numpydoc !!



.. py:class:: RandomProperty(values, distribution=None, allow_duplicates=True)

   .. method:: _get_property(self, rng: RandomState, size=None)



   .. method:: reset(self)




