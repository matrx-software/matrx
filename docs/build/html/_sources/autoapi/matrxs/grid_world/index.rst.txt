:mod:`matrxs.grid_world`
========================

.. py:module:: matrxs.grid_world


Module Contents
---------------

.. py:class:: GridWorld(shape, tick_duration, simulation_goal, rnd_seed=1, visualization_bg_clr='#C2C2C2', visualization_bg_img=None, verbose=False, world_ID=False)

   .. method:: initialize(self, api_info)



   .. method:: run(self, api_info)



   .. method:: get_env_object(self, requested_id, obj_type=None)



   .. method:: get_objects_in_range(self, agent_loc, object_type, sense_range)


      Get all objects of a obj type (normal objects or agent) within a
      certain range around the agent's location
















      ..
          !! processed by numpydoc !!


   .. method:: remove_from_grid(self, object_id, remove_from_carrier=True)


      Remove an object from the grid
      :param object_id: ID of the object to remove
      :param remove_from_carrier: whether to also remove from agents which carry the
      object or not.
















      ..
          !! processed by numpydoc !!


   .. method:: add_to_grid(self, grid_obj)



   .. method:: _register_agent(self, agent, agent_avatar: AgentBody)


      Register human agents and agents to the gridworld environment 
















      ..
          !! processed by numpydoc !!


   .. method:: _register_env_object(self, env_object: EnvObject)


      this function adds the objects 
















      ..
          !! processed by numpydoc !!


   .. method:: _register_logger(self, logger: GridWorldLogger)



   .. method:: __validate_obj_placement(self, env_object)


      Checks whether an object can be successfully placed on the grid
















      ..
          !! processed by numpydoc !!


   .. method:: __step(self)



   .. method:: __check_simulation_goal(self)



   .. method:: __sleep(self)


      Sleeps the current python process for the amount of time that is left after self.curr_tick_duration up to
      in self.__tick_duration
      :return:
















      ..
          !! processed by numpydoc !!


   .. method:: __update_grid(self)



   .. method:: __get_complete_state(self)


      Compile all objects and agents on the grid in one state dictionary
      :return: state with all objects and agents on the grid
















      ..
          !! processed by numpydoc !!


   .. method:: __get_agent_state(self, agent_obj: AgentBody)



   .. method:: __check_action_is_possible(self, agent_id, action_name, action_kwargs)



   .. method:: __perform_action(self, agent_id, action_name, action_kwargs)



   .. method:: __set_agent_busy(self, action_name, action_kwargs, agent_id)



   .. method:: __update_agent_location(self, agent_id)



   .. method:: __update_obj_location(self, obj_id)



   .. method:: __warn(self, warn_str)



   .. method:: messages_send_previous_tick(self)
      :property:



   .. method:: registered_agents(self)
      :property:



   .. method:: environment_objects(self)
      :property:



   .. method:: is_done(self)
      :property:



   .. method:: current_nr_ticks(self)
      :property:



   .. method:: grid(self)
      :property:



   .. method:: shape(self)
      :property:



   .. method:: simulation_goal(self)
      :property:



   .. method:: tick_duration(self)
      :property:




