:mod:`matrxs.agents.agent_brain`
================================

.. py:module:: matrxs.agents.agent_brain


Module Contents
---------------

.. py:class:: AgentBrain

   .. method:: initialize(self)


      Method called the very first time this AgentBrain is called from the world. Here you can initialize everything
      you need for your agent to work since you can't do much in the constructor as the brain needs to be connected to
      a GridWorld first in most cases (e.g. to get an AgentID, its random seed, etc.)
















      ..
          !! processed by numpydoc !!


   .. method:: filter_observations(self, state)


      Filters the state received from the world further.

      In this method you filter the state to only those properties and objects the agent is actually supposed to see.
      Since the grid world returns ALL properties of ALL objects within a certain range(s), but perhaps some objects
      are obscured because they are behind walls, or an agent is not able to see some properties of certain objects.

      This method is separated from the decide_on_action() method because its return value is send to the API as well
      to allows the agent's interface to only show that knowledge the agent is aware of.

      A number of utility methods exist to help filter and memorize states. See <TODO>

      Override this method when creating a new AgentBrain and you need to filter the state further.

      :Parameters:

          **state: dict**
              A state description containing all properties of EnvObject and sub classes that are within a certain range
              as defined by self.sense_capability. The object id is the key, and the value is a dictionary of properties.

      :Returns:

          **filtered_state** : dict
              A dictionary describing the filtered state this agent perceives of the world.













      ..
          !! processed by numpydoc !!


   .. method:: decide_on_action(self, state)


      Contains the decision logic of the agent.

      This method determines what action the agent should perform. The GridWorld is responsible for deciding when an
      agent can perform an action again, if so this method is called for each agent. Two things need to be determined,
      which action and with what arguments.

      The action is returned simply as the class name (as a string), and the action arguments as a dictionary with the
      keys the names of the keyword arguments. An argument that is always possible is that of action_duration, which
      denotes how many ticks this action should take (e.g. a duration of 1, makes sure the agent has to wait 1 tick).

      To quickly build a fairly intelligent agent, several utility classes and methods are available. See <TODO>.

      :Parameters:

          **state** : dict
              ..

          **A state description containing all properties of EnvObject that are within a certain range as**
              ..

          **defined by self.sense_capability. It is a list of properties in a dictionary**
              ..

      :Returns:

          **action_name** : str
              A string of the class name of an action that is also in self.action_set. To ensure backwards compatibility
              you could use Action.__name__ where Action is the intended action.

          **action_args** : dict
              A dictionary with keys any action arguments and as values the actual argument values. If a required argument
              is missing an exception is raised, if an argument that is not used by that action a warning is printed. The
              argument applicable to all action is `action_duration`, which sets the number ticks the agent is put on hold
              by the GridWorld until the action's world mutation is actual performed and the agent can perform a new
              action (a value of 0 is no wait, 1 means to wait 1 tick, etc.).













      ..
          !! processed by numpydoc !!


   .. method:: get_log_data(self)


      Provides a dictionary of data for any Logger

      This method functions to relay data from an agent's decision logic (this AgentBrain class) through the GridWorld
      into a Logger. Here it can be further processed and stored.


      :Returns:

          **data** : dict
              A dictionary with keys identifiable names and the data as its value.













      ..
          !! processed by numpydoc !!


   .. method:: send_message(self, message)


      Sends a Message from this agent to others

      Method that allows you to construct a message that will be send to either a specified agent, a team of agents
      or all agents.

      :Parameters:

          **message: Message**
              A message object that needs to be send. Should be of type Message. It's to_id can contain a single
              recipient, a list of recipients or None. If None, it is send to all other agents.














      ..
          !! processed by numpydoc !!


   .. method:: is_action_possible(self, action, action_kwargs)


      Checks if an action would be possible.

      This method can be called from the AgentBrain to check if a certain action is possible to perform with the
      current state of the GridWorld. It requires as input an action name and its arguments (if any), same as the
      decide_on_action method should return.

      This method does not guarantees that if the action is return by the brain it actually succeeds, as other agents
      may intervene.

      :Parameters:

          **action** : str
              The name of an Action class.

          **action_kwargs** : dict
              A dictionary with keys any action arguments and as values the actual argument values.

      :Returns:

          **succeeded** : bool
              True if the action can be performed, False otherwise.

          **action_results** : ActionResult
              An ActionResult object containing the success or failure of the action, and (if failed) the reason why.













      ..
          !! processed by numpydoc !!


   .. method:: _factory_initialise(self, agent_name, agent_id, action_set, sense_capability, agent_properties, customizable_properties, rnd_seed, callback_is_action_possible)


      Initialization of the brain by the WorldBuilder.

      Called by the WorldFactory to initialise this agent with all required properties in addition with any custom
      properties. This also sets the random number generator with a seed generated based on the random seed of the
      world that is generated.

      :param agent_name:
      :param agent_id:
      :param action_set:
      :param sense_capability:
      :param agent_properties:
      :param customizable_properties:
      :param rnd_seed:

      :Parameters:

          **agent_name** : str
              The name of the agent.

          **agent_id** : str
              The unique ID given by the world to this agent's avatar. So the agent knows what body is his.

          **action_set** : str
              The list of action names this agent is allowed to perform.

          **sense_capability** : SenseCapability
              The SenseCapability of the agent denoting what it can see withing what range.

          **agent_properties** : dict
              The dictionary of properties containing all mandatory and custom properties.

          **customizable_properties** : list
              A list of keys in agent_properties that this agent is allowed to change.

          **rnd_seed** : int
              The random seed used to set the random number generator self.rng

          **callback_is_action_possible** : callable
              A callback to a GridWorld method that can check if an action is possible.














      ..
          !! processed by numpydoc !!


   .. method:: _get_action(self, state, agent_properties, agent_id)


      The function the environment calls. The environment receives this function object and calls it when it is time
      for this agent to select an action.

      Note; This method should NOT be overridden!

      :param state: A state description containing all properties of EnvObject that are within a certain range as
      defined by self.sense_capability. It is a list of properties in a dictionary
      :param agent_properties: The properties of the agent, which might have been changed by the
      environment as a result of actions of this or other agents.
      :param agent_id: the ID of this agent
      :return: The filtered state of this agent, the agent properties which the agent might have changed,
      and an action string, which is the class name of one of the actions in the Action package.















      ..
          !! processed by numpydoc !!


   .. method:: _get_log_data(self)



   .. method:: _set_action_result(self, action_result)


      A function that the environment calls (similarly as the self.get_action method) to set the action_result of the
      action this agent decided upon. Note, that the result is given AFTER the action is performed (if possible).
      Hence it is named the self.previous_action_result, as we can read its contents when we should decide on our
      NEXT action after the action whose result this is.

      Note; This method should NOT be overridden!

      :param action_result: An object that inherits from ActionResult, containing a boolean whether the action
      succeeded and a string denoting the reason why it failed (if it did so).
      :return:















      ..
          !! processed by numpydoc !!


   .. method:: _set_rnd_seed(self, seed)


      The function that seeds this agent's random seed.

      Note; This method should NOT be overridden!

      :param seed: The random seed this agent needs to be seeded with.
      :return:















      ..
          !! processed by numpydoc !!


   .. method:: preprocess_messages(this_agent_id, agent_ids, messages)
      :staticmethod:


      Preprocess messages for sending, such that they can be understood by the GridWorld.
      For example: if the receiver=None, this means it must be sent to all agents. This function creates a message
      directed at every agent.

      This is a static method such that it can also be accessed and used outside of this thread / the GridWorld loop.
      Such as by the API.

      Note; This method should NOT be overridden!

      :Parameters:

          **this_agent_id**
              ID of the current agent, has to be sent as this is a static method

          **agent_ids**
              IDS of all agents known

          **messages**
              Messages which are to be processed

          **Returns**
              Preprocessd messages ready for sending

          **-------**
              ..














      ..
          !! processed by numpydoc !!


   .. method:: _get_messages(self, all_agent_ids)


      Retrieves all message objects the agent has made in a tick, and returns those to the GridWorld for sending.
      It then removes all these messages!

      This method is called by the GridWorld.

      Note; This method should NOT be overridden!
      Parameters
      ----------
      all_agent_ids
          IDs of all agents
      Returns
          A list of message objects with a generic content, the sender (this agent's id) and optionally a
          receiver. If a receiver is not set, the message content is send to all agents including this agent.
      -------















      ..
          !! processed by numpydoc !!


   .. method:: _set_messages(self, messages=None)


      This method is called by the GridWorld.
      It sets all messages intended for this agent to a list that it can access and read.

      Note; This method should NOT be overridden!

      :param messages: A list of dictionaries that contain a 'from_id', 'to_id' and 'content.
      If messages is set to None (or no messages are used as input), only the previous messages are removed















      ..
          !! processed by numpydoc !!


   .. method:: __check_message(mssg, this_agent_id)
      :staticmethod:




.. py:class:: Message(content, from_id, to_id=None)

   A simple object representing a communication message. An agent can create such a Message object by stating the
   content, its own id as the sender and (optional) a receiver. If a receiver is not given it is a message to all
   agents, including the sender.
   NOTE: this Message class is also used by the MATRXS API
















   ..
       !! processed by numpydoc !!


