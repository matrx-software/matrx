:mod:`matrxs.agents.human_agent_brain`
======================================

.. py:module:: matrxs.agents.human_agent_brain


Module Contents
---------------

.. py:class:: HumanAgentBrain

   Bases: :class:`matrxs.agents.agent_brain.AgentBrain`

   .. method:: _factory_initialise(self, agent_name, agent_id, action_set, sense_capability, agent_properties, customizable_properties, rnd_seed, callback_is_action_possible, key_action_map=None)


      Called by the WorldFactory to initialise this agent with all required properties in addition with any custom
      properties. This also sets the random number generator with a seed generated based on the random seed of the
      world that is generated.

      Note; This method should NOT be overridden!

      :param agent_name: The name of the agent.
      :param agent_id: The unique ID given by the world to this agent's avatar. So the agent knows what body is his.
      :param action_set: The list of action names this agent is allowed to perform.
      :param sense_capability: The SenseCapability of the agent denoting what it can see withing what range.
      :param agent_properties: The dictionary of properties containing all mandatory and custom properties.
      :param customizable_properties: A list of keys in agent_properties that this agent is allowed to change.
      :param rnd_seed: The random seed used to set the random number generator self.rng
      :param key_action_map: maps user pressed keys (e.g. arrow key up) to a specific action















      ..
          !! processed by numpydoc !!


   .. method:: _get_action(self, state, agent_properties, agent_id, userinput)


      The function the environment calls. The environment receives this function object and calls it when it is time
      for this agent to select an action.

      The function overwrites the default get_action() function for normal agents,
      and instead executes the action commanded by the user, which is received
      via the API from e.g. a visualization interface.

      Note; This method should NOT be overridden!

      :param state: A state description containing all properties of EnvObject that are detectable by this agent,
      i.e. within the detectable range as defined by self.sense_capability. It is a list of properties in a dictionary
      :param agent_properties: The properties of the agent, which might have been changed by the
      environment as a result of actions of this or other agents.
      :param agent_id: the ID of this agent
      :param userinput: any userinput given by the user for this human agent via the API
      :return: The filtered state of this agent, the agent properties which the agent might have changed,
      and an action string, which is the class name of one of the actions in the Action package.















      ..
          !! processed by numpydoc !!


   .. method:: decide_on_action(self, state, usrinput)


      Contains the decision logic of the agent.

      This method determines what action the human agent will perform. The GridWorld is responsible for deciding when
      an agent can perform an action again, if so this method is called for each agent. Two things need to be
      determined, which action and with what arguments.

      The action is returned simply as the class name (as a string), and the action arguments as a dictionary with the
      keys the names of the keyword arguments. An argument that is always possible is that of action_duration, which
      denotes how many ticks this action should take (e.g. a duration of 1, makes sure the agent has to wait 1 tick).

      To quickly build a fairly intelligent (human) agent, several utility classes and methods are available.
      See <TODO>.

      Note; this function of the human_agent_brain overwrites the decide_on_action() function of the default agent,
      also providing the usrinput.

      :Parameters:

          **state** : dict
              A state description containing all properties of EnvObject that are within a certain range as
              defined by self.sense_capability. It is a list of properties in a dictionary

          **usrinput: list**
              A dictionary containing the key presses of the user, intended for controlling thus human agent.

      :Returns:

          **action_name** : str
              A string of the class name of an action that is also in self.action_set. To ensure backwards compatibility
              you could use Action.__name__ where Action is the intended action.

          **action_args** : dict
              A dictionary with keys any action arguments and as values the actual argument values. If a required argument
              is missing an exception is raised, if an argument that is not used by that action a warning is printed. The
              argument applicable to all action is `action_duration`, which sets the number ticks the agent is put on hold
              by the GridWorld until the action's world mutation is actual performed and the agent can perform a new
              action (a value of 0 is no wait, 1 means to wait 1 tick, etc.).













      ..
          !! processed by numpydoc !!


   .. method:: filter_observations(self, state)


      All our agent work through the OODA-loop paradigm; first you observe, then you orient/pre-process, followed by
      a decision process of an action after which we act upon the action.

      However, as a human agent is controlled by a human, only the observe part is executed.

      This is the Observe phase. In this phase you filter the state further to only those properties the agent is
      actually SUPPOSED to see. Since the grid world returns ALL properties of ALL objects within a certain range(s),
      but perhaps some objects are obscured because they are behind walls, or an agent is not able to see some
      properties an certain objects.

      This filtering is what you do here.

      :param state: A state description containing all properties of EnvObject that are within a certain range as
      defined by self.sense_capability. It is a list of properties in a dictionary
      :return: A filtered state.















      ..
          !! processed by numpydoc !!


   .. method:: filter_userinput(self, userinput)


      From the received userinput, only keep those which are actually Connected
      to a specific agent action
















      ..
          !! processed by numpydoc !!



